# =================================================================
# MI ROSARITA AI APP - ENVIRONMENT CONFIGURATION
# =================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit the .env file to version control

# =================================================================
# FIREBASE CONFIGURATION (REQUIRED)
# =================================================================
# Get these values from your Firebase Console > Project Settings > General
FIREBASE_API_KEY="AIzaSyA93BMt_2HnbqydokllzuwtiYYSPJ9Vix4"
FIREBASE_AUTH_DOMAIN="mi-rosarita-ai-app.firebaseapp.com"
FIREBASE_PROJECT_ID="mi-rosarita-ai-app"
FIREBASE_STORAGE_BUCKET="mi-rosarita-ai-app.appspot.com"
FIREBASE_MESSAGING_SENDER_ID="711431993323"
FIREBASE_APP_ID="1:711431993323:web:e06cf402a5b220a2270bae"            

# =================================================================
# GOOGLE AI / GEMINI API (REQUIRED for Cloud Functions)
# =================================================================
# Get your API key from: https://aistudio.google.com/app/apikey
# This is used for AI-powered itinerary generation, deal descriptions, and photo analysis
# REQUIRED: Must be set for functions to work
GOOGLE_AI_API_KEY="AIzaSyBm6XhW5WJKTq_lfKyeRJhzsaedayOFoSY"
GOOGLE_CLOUD_PROJECT="mi-rosarita-ai-app"

# =================================================================
# GOOGLE CLOUD SERVICE ACCOUNT (OPTIONAL)
# =================================================================
# Only needed if you want to use Google Cloud Vision API for advanced photo analysis
# Download from Firebase Console > Project Settings > Service Accounts
GOOGLE_APPLICATION_CREDENTIALS="./service-account.json"

# =================================================================
# THIRD-PARTY APIs
# =================================================================

# Amadeus API (REQUIRED if using flight/hotel booking features)
# Get from: https://developers.amadeus.com/
# REQUIRED: Must be set for flight and hotel search functions to work
AMADEUS_API_KEY=your_amadeus_api_key_here
AMADEUS_API_SECRET=your_amadeus_api_secret_here

# Google Maps API - For maps, directions, and location services
# Get from: https://console.cloud.google.com/google/maps-apis
GOOGLE_MAPS_API_KEY=your_maps_api_key_here

# Google Vision API - For advanced photo analysis features
# Get from: https://console.cloud.google.com/apis/library/vision.googleapis.com
GOOGLE_VISION_API_KEY=your_vision_api_key_here

# =================================================================
# PAYMENT PROCESSING (OPTIONAL)
# =================================================================
# Stripe integration for handling payments and deals
# Get from: https://dashboard.stripe.com/apikeys
STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key_here
STRIPE_SECRET_KEY=your_stripe_secret_key_here

# =================================================================
# DEVELOPMENT SETTINGS
# =================================================================
NODE_ENV=development

# =================================================================
# SETUP INSTRUCTIONS
# =================================================================
#
# 1. Firebase Setup:
#    - Create a new Firebase project at https://console.firebase.google.com/
#    - Enable Authentication, Firestore, Storage, and Functions
#    - Copy the config values from Project Settings > General
#
# 2. Required API Keys:
#    - GOOGLE_AI_API_KEY: Get from https://aistudio.google.com/app/apikey
#    - AMADEUS_API_KEY & AMADEUS_API_SECRET: Get from https://developers.amadeus.com/
#      (Required for flight and hotel functionality)
#
# 3. Optional APIs:
#    - Set up each service as needed for your features
#    - Update the corresponding environment variables
#
# 4. Security Notes:
#    - Never commit your .env file to version control
#    - Keep your API keys secure and rotate them regularly
#    - Use Firebase security rules to protect your data
#
# =================================================================
# MCP (Model Context Protocol) SERVERS CONFIGURATION
# =================================================================
# These MCP servers provide AI assistance for development, testing, and deployment
# Install the MCP servers to enhance your development workflow

# Firebase MCP Server - Development operations and Cloud Functions management
# Run with: node mcp-servers/firebase-server.js
MCP_FIREBASE_ENABLED=true
MCP_FIREBASE_SERVER_PATH="./mcp-servers/firebase-server.js"

# React Native MCP Server - App development, building, and Expo operations
# Run with: node mcp-servers/react-native-server.js
MCP_REACT_NATIVE_ENABLED=true
MCP_REACT_NATIVE_SERVER_PATH="./mcp-servers/react-native-server.js"

# Google AI MCP Server - Gemini API development and testing
# Run with: node mcp-servers/google-ai-server.js
MCP_GOOGLE_AI_ENABLED=true
MCP_GOOGLE_AI_SERVER_PATH="./mcp-servers/google-ai-server.js"

# API Testing MCP Server - Amadeus, Stripe, and external API integration testing
# Run with: node mcp-servers/api-testing-server.js
MCP_API_TESTING_ENABLED=true
MCP_API_TESTING_SERVER_PATH="./mcp-servers/api-testing-server.js"

# Testing & Quality MCP Server - Code quality, linting, and testing operations
# Run with: node mcp-servers/testing-quality-server.js
MCP_TESTING_QUALITY_ENABLED=true
MCP_TESTING_QUALITY_SERVER_PATH="./mcp-servers/testing-quality-server.js"

# Security MCP Server - API key validation, security scanning, and encryption
# Run with: node mcp-servers/security-server.js
MCP_SECURITY_ENABLED=true
MCP_SECURITY_SERVER_PATH="./mcp-servers/security-server.js"

# =================================================================
# MCP SERVERS SETUP INSTRUCTIONS
# =================================================================
#
# 1. Install Required Dependencies:
#    npm install --save-dev @modelcontextprotocol/sdk
#
# 2. Create MCP Configuration File (.mcprc or similar):
#    Add server configurations pointing to the JavaScript files above
#
# 3. Environment Variables:
#    - Set MCP_*_ENABLED=true to enable specific servers
#    - Update MCP_*_SERVER_PATH to match your file locations
#
# 4. Available MCP Servers:
#
#    a) Firebase Server (firebase-server.js):
#       - Deploy Cloud Functions
#       - Start Firebase emulators
#       - Query Firestore database
#       - Manage Firebase projects
#
#    b) React Native Server (react-native-server.js):
#       - Run apps on iOS/Android devices
#       - Start Expo development server
#       - Build production apps
#       - Lint and format code
#
#    c) Google AI Server (google-ai-server.js):
#       - Test Gemini API calls
#       - Generate AI itineraries
#       - Analyze photos with Gemini Vision
#       - Monitor AI API usage
#
#    d) API Testing Server (api-testing-server.js):
#       - Test Amadeus flight/hotel APIs
#       - Test Stripe payment processing
#       - Validate API responses
#       - Generate mock test data
#
#    e) Testing & Quality Server (testing-quality-server.js):
#       - Run unit tests and coverage
#       - Lint TypeScript/React code
#       - Check type definitions
#       - Security scanning
#
#    f) Security Server (security-server.js):
#       - Validate API key formats
#       - Scan for exposed secrets
#       - Generate secure configurations
#       - Environment security checks
#
# 5. Usage with AI Assistants:
#    - Enable MCP servers in your AI assistant configuration
#    - AI assistants can then use these tools to help with development tasks
#    - Tools are automatically available through the Model Context Protocol
#
# 6. MCP Server Dependencies:
#    All servers require: @modelcontextprotocol/sdk
#    Additional dependencies may be needed based on tools used
#    - For Firebase server: firebase-tools
#    - For React Native server: @react-native/cli, expo-cli
#    - For API testing: node-fetch (may need polyfill)
#
# =================================================================
# =================================================================
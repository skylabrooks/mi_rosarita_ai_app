import React, {Component, ErrorInfo, ReactNode, createContext} from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
} from 'react-native';
import Button from './Button';
import Card from './Card';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error?: Error;
  errorInfo?: ErrorInfo;
  hasAsyncError: boolean;
  asyncError?: Error;
}

interface ErrorBoundaryContextType {
  catchAsyncError: (error: Error) => void;
}

export const ErrorBoundaryContext = createContext<ErrorBoundaryContextType | null>(null);

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {hasError: false, hasAsyncError: false};
  }

  static getDerivedStateFromError(error: Error): State {
    return {hasError: true, error, hasAsyncError: false};
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.setState({
      error,
      errorInfo,
    });

    // Call optional error callback
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }

    // In a real app, you might want to log this to an error reporting service
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  catchAsyncError = (error: Error) => {
    this.setState({
      hasAsyncError: true,
      asyncError: error,
    });

    // Call optional error callback
    if (this.props.onError) {
      this.props.onError(error, {componentStack: ''});
    }

    // Log async error
    console.error('ErrorBoundary caught an async error:', error);
  };

  handleRetry = () => {
    this.setState({
      hasError: false,
      error: undefined,
      errorInfo: undefined,
      hasAsyncError: false,
      asyncError: undefined,
    });
  };

  render() {
    if (this.state.hasError || this.state.hasAsyncError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      const error = this.state.error || this.state.asyncError;
      const isAsync = this.state.hasAsyncError;

      return (
        <View style={styles.container}>
          <Card style={styles.errorCard}>
            <Text style={styles.errorTitle}>
              {isAsync ? 'Async Operation Failed' : 'Oops! Something went wrong'}
            </Text>
            <Text style={styles.errorMessage}>
              {isAsync
                ? 'An error occurred during an async operation. Please try again.'
                : "We're sorry, but an unexpected error occurred. Please try again."
              }
            </Text>

            {__DEV__ && error && (
              <ScrollView style={styles.errorDetails}>
                <Text style={styles.errorText}>
                  {error.toString()}
                </Text>
                {!isAsync && this.state.errorInfo && (
                  <Text style={styles.errorStack}>
                    {this.state.errorInfo.componentStack}
                  </Text>
                )}
              </ScrollView>
            )}

            <View style={styles.buttonContainer}>
              <Button
                title="Try Again"
                onPress={this.handleRetry}
                style={styles.retryButton}
              />
            </View>
          </Card>
        </View>
      );
    }

    return (
      <ErrorBoundaryContext.Provider value={{ catchAsyncError: this.catchAsyncError }}>
        {this.props.children}
      </ErrorBoundaryContext.Provider>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f8f9fa',
  },
  errorCard: {
    maxWidth: '100%',
    alignItems: 'center',
  },
  errorTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#e74c3c',
    marginBottom: 12,
    textAlign: 'center',
  },
  errorMessage: {
    fontSize: 16,
    color: '#7f8c8d',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 22,
  },
  errorDetails: {
    maxHeight: 200,
    width: '100%',
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 12,
    marginBottom: 20,
  },
  errorText: {
    fontSize: 12,
    color: '#e74c3c',
    fontFamily: 'monospace',
    marginBottom: 8,
  },
  errorStack: {
    fontSize: 10,
    color: '#95a5a6',
    fontFamily: 'monospace',
    lineHeight: 14,
  },
  buttonContainer: {
    width: '100%',
  },
  retryButton: {
    width: '100%',
  },
});

export const useErrorBoundary = () => {
  const context = React.useContext(ErrorBoundaryContext);
  if (!context) {
    throw new Error('useErrorBoundary must be used within an ErrorBoundary');
  }
  return context;
};

export default ErrorBoundary;